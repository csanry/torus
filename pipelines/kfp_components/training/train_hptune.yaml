name: Train hptune
inputs:
- {name: train_file, type: String}
outputs:
- {name: trained_model, type: Model}
- {name: model_path, type: String}
- {name: train_auc, type: Float}
implementation:
  container:
    image: gcr.io/pacific-torus-347809/mle-fp/base:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'xgboost' 'gcsfs' 'sklearn' 'kfp==1.8.12' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def train_hptune(
              train_file: str,
              trained_model: Output[Model]
      ) -> NamedTuple("outputs", [("model_path", str), ('train_auc', float)]):

          from sklearn.model_selection import RandomizedSearchCV
          from sklearn.ensemble import RandomForestClassifier
          from sklearn.metrics import roc_auc_score
          from datetime import datetime
          from google.cloud import storage
          import pandas as pd
          import os
          import pickle

          train_df = pd.read_csv(train_file)

          PARAMS = {
              'n_estimators': [200, 300, 400],
          }

          PARAM_COMB = 2

          random_search = RandomizedSearchCV(RandomForestClassifier(),
                                             param_distributions=PARAMS,
                                             n_iter=PARAM_COMB,
                                             scoring='accuracy',
                                             verbose=2,
                                             random_state=2022
                                             )

          random_search.fit(train_df.drop(columns=["target"]), train_df.target)

          best_params = random_search.best_params_

          rf_model = RandomForestClassifier(**best_params)

          X = train_df.drop(['target'], axis = 1)
          Y = train_df['target']
          rf_model.fit(X, Y)

          y_prob = rf_model.predict_proba(X)[:, 1]
          train_auc = roc_auc_score(Y, y_prob)

          trained_model.metadata['framework'] = 'Random_Forest'
          trained_model.metadata['parameters'] = best_params
          trained_model.metadata['train_auc'] = train_auc

          model_output_path = "gs://mle-dwh-torus/models/"
          model_id = datetime.now().strftime(f"%d%H%M")
          model_filename = f'model_{model_id}.pkl'
          local_path = model_filename

          with open(local_path, 'wb') as model_file:
              pickle.dump(rf_model, model_file)

          storage_path = os.path.join(model_output_path, model_filename)
          blob = storage.blob.Blob.from_string(storage_path, client = storage.Client())
          blob.upload_from_filename(local_path)

          from collections import namedtuple
          results = namedtuple("outputs", ["model_path", "train_auc"])
          return results(storage_path, train_auc)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train_hptune
