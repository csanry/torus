name: Train hptune
inputs:
- {name: train_file, type: String}
outputs:
- {name: model_path, type: String}
- {name: train_auc, type: Float}
implementation:
  container:
    image: gcr.io/pacific-torus-347809/mle-fp/base:latest
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'xgboost' 'gcsfs' 'sklearn' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip
      install --quiet --no-warn-script-location 'xgboost' 'gcsfs' 'sklearn' --user)
      && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def train_hptune(
              train_file,
      ):
          from xgboost import XGBClassifier
          from sklearn.model_selection import RandomizedSearchCV
          from sklearn.metrics import roc_auc_score
          from datetime import datetime
          from google.cloud import storage
          import pandas as pd
          import os
          import pickle

          train_df = pd.read_csv(train_file)

          PARAMS = {
              'n_estimators': [200, 300, 400],
              'learning_rate': [0.01, 0.1, 1]
          }

          XGB = XGBClassifier()
          PARAM_COMB = 3

          random_search = RandomizedSearchCV(XGB,
                                             param_distributions=PARAMS,
                                             n_iter=PARAM_COMB,
                                             scoring='accuracy',
                                             verbose=3,
                                             random_state=2022
                                             )

          random_search.fit(train_df.drop(columns=["target"]), train_df.target)

          best_params = random_search.best_params_

          xg_model = XGBClassifier(**best_params)

          X = train_df.drop(['target'], axis = 1)
          Y = train_df['target']
          xg_model.fit(X, Y)

          y_prob = xg_model.predict_proba(X)[:, 1]
          train_auc = roc_auc_score(Y, y_prob)

          model_output_path = "gs://mle-dwh-torus/models/"
          model_id = datetime.now().strftime(f"%d%H%M")
          model_filename = f'model_{model_id}.pkl'
          local_path = model_filename

          with open(local_path, 'wb') as model_file:
              pickle.dump(xg_model, model_file)

          storage_path = os.path.join(model_output_path, model_filename)
          blob = storage.blob.Blob.from_string(storage_path, client = storage.Client())
          blob.upload_from_filename(local_path)

          from collections import namedtuple
          results = namedtuple("outputs", ["model_path", "train_auc"])
          return results(storage_path, train_auc)

      def _serialize_float(float_value: float) -> str:
          if isinstance(float_value, str):
              return float_value
          if not isinstance(float_value, (float, int)):
              raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                  str(float_value), str(type(float_value))))
          return str(float_value)

      def _serialize_str(str_value: str) -> str:
          if not isinstance(str_value, str):
              raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                  str(str_value), str(type(str_value))))
          return str_value

      import argparse
      _parser = argparse.ArgumentParser(prog='Train hptune', description='')
      _parser.add_argument("--train-file", dest="train_file", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = train_hptune(**_parsed_args)

      _output_serializers = [
          _serialize_str,
          _serialize_float,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --train-file
    - {inputValue: train_file}
    - '----output-paths'
    - {outputPath: model_path}
    - {outputPath: train_auc}
